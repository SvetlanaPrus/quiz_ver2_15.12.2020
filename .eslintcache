[{"C:\\pasv_react\\quiz_ver2_15.12.2020\\src\\index.tsx":"1","C:\\pasv_react\\quiz_ver2_15.12.2020\\src\\reportWebVitals.ts":"2","C:\\pasv_react\\quiz_ver2_15.12.2020\\src\\App.tsx":"3"},{"size":500,"mtime":499162500000,"results":"4","hashOfConfig":"5"},{"size":425,"mtime":499162500000,"results":"6","hashOfConfig":"5"},{"size":4061,"mtime":1609080128172,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"f7brvg",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"C:\\pasv_react\\quiz_ver2_15.12.2020\\src\\index.tsx",[],["16","17"],"C:\\pasv_react\\quiz_ver2_15.12.2020\\src\\reportWebVitals.ts",[],"C:\\pasv_react\\quiz_ver2_15.12.2020\\src\\App.tsx",["18","19"],"import React, {useState} from 'react';\nimport './App.css';\n\ninterface ITask {\n    firstNumber: number\n    sign: string\n    secondNumber: number\n    sysAnswer: number      //otvet samoj sistemi na primer\n    count: number\n}\n\nfunction App() {\n    const [tasks, setTasks] = useState<ITask[]>([])                      //massiv primerov\n    const [startIsPress, setStartIsPress] = useState(false)             //kontrol knopki 'Start'\n    const [count, setCount] = useState(1)                           //kontrol za kolichestvom primerov\n    const [myAnswer, setMyAnswer] = useState('')                   //kontrol stroki 'input'\n    // const [okIsPress, setOkIsPress] = useState(false)\n    const [rightAnswer, setRightAnswer] = useState(0)\n    const [wrongAnswer, setWrongAnswer] = useState(0)\n\n    //zadaem vse peremennie:\n    const mySign = ['+', '-', '*']\n    const firstNumber = Math.floor(Math.random() * 10)\n    const secondNumber = Math.floor(Math.random() * 10)\n    const sign = mySign[Math.floor(Math.random() * mySign.length)]\n\n\n    //peremennaja 'otvet sistemi na primer':\n    const getSysAnswer = () => {\n        let sysResult = 0;\n        switch (sign) {\n            case \"+\":\n                sysResult = firstNumber + secondNumber;\n                break;\n            case \"-\":\n                sysResult = firstNumber - secondNumber;\n                break;\n            case \"*\":\n                sysResult = firstNumber * secondNumber;\n                break;\n        }\n        return sysResult;\n    }\n\n    //zapusk primera dlja polzovatelja:\n    const quiz = () => {\n        const newCount = count + 1;\n        setCount(newCount);                                           //zapuskaem schetchik zadach\n        if (count === 10) {                                                  //esli uze 10 primerov - vihodim\n            setCount(0)                                                 //schetchik obnuljaem\n            exit()\n        } else {\n            setStartIsPress(true);                                     //menjaem status nazatija knopki 'Start'\n            const a = getSysAnswer();\n            const newQuiz = [...tasks, {firstNumber, sign, secondNumber, sysAnswer: a, count}]\n            setTasks(newQuiz)\n        }\n    }\n\n    const save = (myAnswer: number) => {\n        if (count === 10) {\n            finish()\n        } else {\n            myAnswer === rightAnswer ? setRightAnswer(rightAnswer + 1) : setWrongAnswer(wrongAnswer + 1)\n        }\n        setMyAnswer('');                                               //ochistka polja vvoda v 'input'\n        {quiz()}\n    }\n\n    const finish = () => {\n        alert(`Right answers: ${rightAnswer}, wrong answers: ${wrongAnswer}`)\n        {\n            exit()\n        }\n    }\n\n    const exit = () => {\n        setStartIsPress(false)\n        setTasks([])\n    }\n    console.log(tasks)\n    console.log(count)\n\n    return (\n        <div className=\"App\">\n            {startIsPress ?\n                <span>\n                    <h2>Please solve this task:</h2>\n                    {tasks.map((el, index) =>\n                        index === tasks.length - 1 ?\n                            <div>\n                                {index + 1}) {el.firstNumber} {el.sign} {el.secondNumber} = {el.sysAnswer}\n                                <input type='number' value={myAnswer} onChange={(e) => setMyAnswer(e.target.value)}/>\n                                <button onClick={ () => save(+myAnswer)}>Save</button>\n                            </div>\n                            : <></>\n                    )}\n                </span>\n                : <></>\n            }\n\n            {startIsPress ?\n                <ul>\n                    {count === 10 ?\n                        <button onClick={finish}> Finish </button>\n                        : <button onClick={quiz}> New Quiz </button>\n                    }\n                    <button onClick={exit}> Exit</button>\n                </ul>\n                : <button onClick={quiz}> Start </button>\n            }\n        </div>\n    );\n}\n\nexport default App;\n",{"ruleId":"20","replacedBy":"21"},{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","severity":1,"message":"25","line":67,"column":9,"nodeType":"26","messageId":"27","endLine":67,"endColumn":17},{"ruleId":"24","severity":1,"message":"25","line":72,"column":9,"nodeType":"26","messageId":"27","endLine":74,"endColumn":10},"no-native-reassign",["28"],"no-negated-in-lhs",["29"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation"]